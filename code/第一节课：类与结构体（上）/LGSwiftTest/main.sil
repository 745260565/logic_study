sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

struct Point {
  @_hasStorage @_hasInitialValue var x: Double { get set }
  @_hasStorage @_hasInitialValue var y: Double { get set }
  func test()
  mutating func moveBy(x deltax: Double, y deltaY: Double)
  init()
  init(x: Double = 0.0, y: Double = 0.0)
}

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// variable initialization expression of Point.x
sil hidden [transparent] @$s4main5PointV1xSdvpfi : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function '$s4main5PointV1xSdvpfi'

// Double.init(_builtinFloatLiteral:)
sil public_external [transparent] @$sSd20_builtinFloatLiteralSdBf80__tcfC : $@convention(method) (Builtin.FPIEEE80, @thin Double.Type) -> Double {
// %0                                             // user: %2
bb0(%0 : $Builtin.FPIEEE80, %1 : $@thin Double.Type):
  %2 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64 // user: %3
  %3 = struct $Double (%2 : $Builtin.FPIEEE64)    // user: %4
  return %3 : $Double                             // id: %4
} // end sil function '$sSd20_builtinFloatLiteralSdBf80__tcfC'

// variable initialization expression of Point.y
sil hidden [transparent] @$s4main5PointV1ySdvpfi : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function '$s4main5PointV1ySdvpfi'

// Point.x.getter
sil hidden [transparent] @$s4main5PointV1xSdvg : $@convention(method) (Point) -> Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.x       // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s4main5PointV1xSdvg'

// Point.x.setter
sil hidden [transparent] @$s4main5PointV1xSdvs : $@convention(method) (Double, @inout Point) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Double, %1 : $*Point):
  debug_value %0 : $Double, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Point // users: %7, %5
  %5 = struct_element_addr %4 : $*Point, #Point.x // user: %6
  store %0 to %5 : $*Double                       // id: %6
  end_access %4 : $*Point                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s4main5PointV1xSdvs'

// Point.x.modify
sil hidden [transparent] @$s4main5PointV1xSdvM : $@yield_once @convention(method) (@inout Point) -> @yields @inout Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $*Point):
  debug_value_addr %0 : $*Point, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Point // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Point, #Point.x // user: %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main5PointV1xSdvM'

// Point.y.getter
sil hidden [transparent] @$s4main5PointV1ySdvg : $@convention(method) (Point) -> Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.y       // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s4main5PointV1ySdvg'

// Point.y.setter
sil hidden [transparent] @$s4main5PointV1ySdvs : $@convention(method) (Double, @inout Point) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Double, %1 : $*Point):
  debug_value %0 : $Double, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Point // users: %7, %5
  %5 = struct_element_addr %4 : $*Point, #Point.y // user: %6
  store %0 to %5 : $*Double                       // id: %6
  end_access %4 : $*Point                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s4main5PointV1ySdvs'

// Point.y.modify
sil hidden [transparent] @$s4main5PointV1ySdvM : $@yield_once @convention(method) (@inout Point) -> @yields @inout Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $*Point):
  debug_value_addr %0 : $*Point, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Point // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Point, #Point.y // user: %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main5PointV1ySdvM'

// Point.test()
sil hidden @$s4main5PointV4testyyF : $@convention(method) (Point) -> () {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.x       // user: %3
  debug_value %2 : $Double, let, name "z"         // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s4main5PointV4testyyF'

// Point.moveBy(x:y:)
sil hidden @$s4main5PointV6moveBy1x1yySd_SdtF : $@convention(method) (Double, Double, @inout Point) -> () {
// %0 "deltax"                                    // users: %10, %3
// %1 "deltaY"                                    // users: %20, %4
// %2 "self"                                      // users: %16, %6, %5
bb0(%0 : $Double, %1 : $Double, %2 : $*Point):
  debug_value %0 : $Double, let, name "deltax", argno 1 // id: %3
  debug_value %1 : $Double, let, name "deltaY", argno 2 // id: %4
  debug_value_addr %2 : $*Point, var, name "self", argno 3 // id: %5
  %6 = begin_access [modify] [static] %2 : $*Point // users: %15, %7
  %7 = struct_element_addr %6 : $*Point, #Point.x // users: %13, %8
  %8 = struct_element_addr %7 : $*Double, #Double._value // user: %9
  %9 = load %8 : $*Builtin.FPIEEE64               // user: %11
  %10 = struct_extract %0 : $Double, #Double._value // user: %11
  %11 = builtin "fadd_FPIEEE64"(%9 : $Builtin.FPIEEE64, %10 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %12
  %12 = struct $Double (%11 : $Builtin.FPIEEE64)  // user: %13
  store %12 to %7 : $*Double                      // id: %13
  %14 = tuple ()
  end_access %6 : $*Point                         // id: %15
  %16 = begin_access [modify] [static] %2 : $*Point // users: %25, %17
  %17 = struct_element_addr %16 : $*Point, #Point.y // users: %23, %18
  %18 = struct_element_addr %17 : $*Double, #Double._value // user: %19
  %19 = load %18 : $*Builtin.FPIEEE64             // user: %21
  %20 = struct_extract %1 : $Double, #Double._value // user: %21
  %21 = builtin "fadd_FPIEEE64"(%19 : $Builtin.FPIEEE64, %20 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %22
  %22 = struct $Double (%21 : $Builtin.FPIEEE64)  // user: %23
  store %22 to %17 : $*Double                     // id: %23
  %24 = tuple ()
  end_access %16 : $*Point                        // id: %25
  %26 = tuple ()                                  // user: %27
  return %26 : $()                                // id: %27
} // end sil function '$s4main5PointV6moveBy1x1yySd_SdtF'

// static Double.+= infix(_:_:)
sil public_external [transparent] @$sSd2peoiyySdz_SdtFZ : $@convention(method) (@inout Double, Double, @thin Double.Type) -> () {
// %0                                             // users: %8, %3
// %1                                             // user: %5
bb0(%0 : $*Double, %1 : $Double, %2 : $@thin Double.Type):
  %3 = struct_element_addr %0 : $*Double, #Double._value // user: %4
  %4 = load %3 : $*Builtin.FPIEEE64               // user: %6
  %5 = struct_extract %1 : $Double, #Double._value // user: %6
  %6 = builtin "fadd_FPIEEE64"(%4 : $Builtin.FPIEEE64, %5 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %7
  %7 = struct $Double (%6 : $Builtin.FPIEEE64)    // user: %8
  store %7 to %0 : $*Double                       // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSd2peoiyySdz_SdtFZ'

// default argument 0 of Point.init(x:y:)
sil hidden @$s4main5PointV1x1yACSd_SdtcfcfA_ : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function '$s4main5PointV1x1yACSd_SdtcfcfA_'

// default argument 1 of Point.init(x:y:)
sil hidden @$s4main5PointV1x1yACSd_SdtcfcfA0_ : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function '$s4main5PointV1x1yACSd_SdtcfcfA0_'

// Point.init(x:y:)
sil hidden @$s4main5PointV1x1yACSd_SdtcfC : $@convention(method) (Double, Double, @thin Point.Type) -> Point {
// %0 "$implicit_value"                           // user: %3
// %1 "$implicit_value"                           // user: %3
// %2 "$metatype"
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Point.Type):
  %3 = struct $Point (%0 : $Double, %1 : $Double) // user: %4
  return %3 : $Point                              // id: %4
} // end sil function '$s4main5PointV1x1yACSd_SdtcfC'

// Point.init()
sil hidden @$s4main5PointVACycfC : $@convention(method) (@thin Point.Type) -> Point {
// %0 "$metatype"
bb0(%0 : $@thin Point.Type):
  %1 = alloc_stack $Point, let, name "self"       // users: %6, %2, %11
  %2 = struct_element_addr %1 : $*Point, #Point.x // user: %5
  %3 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %4
  %4 = struct $Double (%3 : $Builtin.FPIEEE64)    // users: %5, %10
  store %4 to %2 : $*Double                       // id: %5
  %6 = struct_element_addr %1 : $*Point, #Point.y // user: %9
  %7 = float_literal $Builtin.FPIEEE64, 0x0 // 0  // user: %8
  %8 = struct $Double (%7 : $Builtin.FPIEEE64)    // users: %9, %10
  store %8 to %6 : $*Double                       // id: %9
  %10 = struct $Point (%4 : $Double, %8 : $Double) // user: %12
  dealloc_stack %1 : $*Point                      // id: %11
  return %10 : $Point                             // id: %12
} // end sil function '$s4main5PointVACycfC'



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => '/Users/chenghao/developer/logic_study/code/第一节课：类与结构体（上）/LGSwiftTest/LGSwiftTest/main.swift'


